name: Test and Deploy with Bash and Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      S_DOMAIN: ${{ secrets.S_DOMAIN }}
      S_PUBLIC_IP: ${{ secrets.S_PUBLIC_IP }}
      CF_API: ${{ secrets.CF_API }}
      CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      S_EMAIL: ${{ secrets.S_EMAIL }}

    steps:
    # Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # Debug SSH connection
    - name: Debug SSH connection
      run: |
        echo "Testing SSH connection..."
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
        chmod 600 private_key
    
        echo "Checking key permissions..."
        ls -l private_key
    
        echo "Testing SSH connection to ${{ secrets.ELASTIC_IP }} as ${{ secrets.SSH_USERNAME }} on port ${{ secrets.SSH_PORT }}..."
        ssh -vvv -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.ELASTIC_IP }} "echo 'SSH Connection Successful'"

    # Edit Cloudflare and other variables in Bash Scripts
    - name: Edit CF Variables
      run: |
        echo "Editing Cloudflare variables in lemp-setup.sh..."
        sed -i 's/S_DOMAIN/${{ secrets.S_DOMAIN }}/g' ./lemp-setup.sh
        sed -i 's/S_ELASTIC_IP/${{ secrets.S_PUBLIC_IP }}/g' ./lemp-setup.sh
        sed -i 's/S_CF_API/${{ secrets.CF_API }}/g' ./lemp-setup.sh
        sed -i 's/S_CF_ZONE_ID/${{ secrets.CF_ZONE_ID }}/g' ./lemp-setup.sh
        cat ./lemp-setup.sh  # Print file contents to confirm the edits
        
        echo "Editing Cloudflare variables in certbot-ssl-install.sh..."
        sed -i 's/S_EMAIL/${{ secrets.S_EMAIL }}/g' ./certbot-ssl-install.sh
        sed -i 's/S_DOMAIN/${{ secrets.S_DOMAIN }}/g' ./certbot-ssl-install.sh
        cat ./certbot-ssl-install.sh  # Print file contents to confirm the edits

        echo "Editing Cloudflare variables in cloudflare-dns.sh..."
        sed -i 's/S_DOMAIN/${{ secrets.S_DOMAIN }}/g' ./cloudflare-dns.sh
        sed -i 's/S_ELASTIC_IP/${{ secrets.S_PUBLIC_IP }}/g' ./cloudflare-dns.sh
        sed -i 's/S_CF_API/${{ secrets.CF_API }}/g' ./cloudflare-dns.sh
        sed -i 's/S_CF_ZONE_ID/${{ secrets.CF_ZONE_ID }}/g' ./cloudflare-dns.sh
        cat ./cloudflare-dns.sh  # Print file contents to confirm the edits

        echo "Editing MariaDB variables in wordpress-install.sh..."
        sed -i 's/DB_PASSWORD/${{ secrets.DB_PASSWORD }}/g' ./wordpress-install.sh
        sed -i 's/DB_USERNAME/${{ secrets.DB_USERNAME }}/g' ./wordpress-install.sh
        sed -i 's/RDS_ENDPOINT/${{ secrets.RDS_ENDPOINT }}/g' ./wordpress-install.sh
        cat ./wordpress-install.sh  # Print file contents to confirm the edits
        
    # Copy files to VM using SCP
    - name: Copy files to VM
      run: |
        echo "Copying files to VM..."
        scp -r -i private_key -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} "${PWD}/" ${{ secrets.SSH_USERNAME }}@${{ secrets.ELASTIC_IP }}:/home/ubuntu/
        echo "Files copied successfully."

    # Run git-setup.sh on the VM
    - name: Run git-setup.sh on the VM
      run: |
        echo "Running git-setup.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.ELASTIC_IP }} 'sudo bash /home/ubuntu/EPA-Wordpress-project/git-setup.sh || { echo "Script failed"; exit 1; }' 
        echo "Script executed successfully."

    # Run lemp-setup.sh on the VM
    - name: Run lemp-setup.sh on the VM
      run: |
        echo "Running lemp-setup.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.ELASTIC_IP }} 'sudo bash /home/ubuntu/EPA-Wordpress-project/lemp-setup.sh || { echo "Script failed"; exit 1; }'
        echo "Script executed successfully."

    # Run cloudflare-dns.sh on the VM
    - name: Run cloudflare-dns.sh on the VM
      run: |
        echo "Running cloudflare-dns.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.ELASTIC_IP }} 'sudo bash /home/ubuntu/EPA-Wordpress-project/cloudflare-dns.sh || { echo "Script failed"; exit 1; }'
        echo "Script executed successfully."

    # Run wordpress-install.sh on the VM
    - name: Run wordpress-install.sh on the VM
      run: |
        echo "Running wordpress-install.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.ELASTIC_IP }} 'sudo bash /home/ubuntu/EPA-Wordpress-project/wordpress-install.sh || { echo "Script failed"; exit 1; }'
        echo "Script executed successfully."

    # Run certbot-ssl-install.sh on the VM
    - name: Run certbot-ssl-install.sh on the VM
      run: |
        echo "Running certbot-ssl-install.sh on VM..."
        ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.ELASTIC_IP }} 'sudo bash /home/ubuntu/EPA-Wordpress-project/certbot-ssl-install.sh || { echo "Script failed"; exit 1; }'
        echo "Script executed successfully."

    # Set up Terraform
    - name: Set Up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5

    # Initialize Terraform
    - name: Initialize Terraform
      run: terraform init

    # Terraform Plan
    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        S_DOMAIN: ${{ secrets.S_DOMAIN }}
        S_PUBLIC_IP: ${{ secrets.S_PUBLIC_IP }}
        CF_API: ${{ secrets.CF_API }}
        CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      run: terraform plan -out=tfplan

    # Terraform Apply
    - name: Terraform Apply
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        S_DOMAIN: ${{ secrets.S_DOMAIN }}
        S_PUBLIC_IP: ${{ secrets.S_PUBLIC_IP }}
        CF_API: ${{ secrets.CF_API }}
        CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
      run: terraform apply -auto-approve tfplan
