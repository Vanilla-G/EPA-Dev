name: Deploy LEMP stack

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Cloudflare Environment Variables
        env:
          S_DOMAIN: ${{ secrets.S_DOMAIN }}
          S_PUBLIC_IP: ${{ secrets.S_PUBLIC_IP }}
          S_CF_API: ${{ secrets.S_CF_API }}
          S_CF_ZONE_ID: ${{ secrets.S_CF_ZONE_ID }}
        run: |
          echo "Cloudflare secrets set in environment"
          echo "S_DOMAIN=$S_DOMAIN"
          echo "S_PUBLIC_IP=$S_PUBLIC_IP"
          echo "CF_API=$S_CF_API"
          echo "CF_ZONE_ID=$S_CF_ZONE_ID"

      - name: Lint Shell Scripts
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          shellcheck -e SC2001 -e SC2153 -e SC2129 -e SC2034 -e SC2154 ./*.sh  # ignore rule sc2001

      - name: Debug SSH connection
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          S_PUBLIC_IP: ${{ secrets.S_PUBLIC_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          echo "Testing SSH connection..."
          echo "Private key directory ${pwd}"
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
      
          echo "Checking key permissions..."
          ls -l private_key
      
          echo "Testing SSH connection to $S_PUBLIC_IP as $SSH_USER on port $SSH_PORT..."
          ssh -vvv -i private_key -o StrictHostKeyChecking=no -p $SSH_PORT $SSH_USER@$S_PUBLIC_IP "echo 'SSH Connection Successful'"
  
      - name: Edit ALL Variables   
        run: |
          echo "Secrets to lemp-setup.sh"
          sed -i 's/S_DOMAIN/${{ secrets.S_DOMAIN }}/g' ./lemp-setup.sh
          cat ./lemp-setup.sh

          echo "Secrets to cloudflare-dns.sh"
          sed -i 's/S_DOMAIN/${{ secrets.S_DOMAIN }}/g' ./cloudflare-dns.sh
          sed -i 's/S_PUBLIC_IP/${{ secrets.S_PUBLIC_IP }}/g' ./cloudflare-dns.sh
          sed -i 's/S_CF_API/${{ secrets.S_CF_API }}/g' ./cloudflare-dns.sh
          sed -i 's/S_CF_ZONE_ID/${{ secrets.S_CF_ZONE_ID }}/g' ./cloudflare-dns.sh
          cat ./cloudflare-dns.sh

          echo "Secrets to wordpress-install.sh"
          sed -i 's/S_DB_ENDPOINT/${{ secrets.S_DB_ENDPOINT }}/g' ./wordpress-install.sh
          sed -i 's/S_DB_NAME/${{ secrets.S_DB_NAME }}/g' ./wordpress-install.sh
          sed -i 's/S_DB_PASSWORD/${{ secrets.S_DB_PASSWORD }}/g' ./wordpress-install.sh
          sed -i 's/S_DB_USER/${{ secrets.S_DB_USER }}/g' ./wordpress-install.sh

          cat ./wordpress-install.sh

          echo "Secrets to certbot-ssl-install.sh"
          sed -i 's/S_DOMAIN/${{ secrets.S_DOMAIN }}/g' ./certbot-ssl-install.sh
          sed -i 's/S_EMAIL/${{ secrets.S_EMAIL }}/g' ./certbot-ssl-install.sh
          cat ./certbot-ssl-install.sh


          echo "Secrets to wordpress-backup.sh"
          sed -i "s#GH_TOKEN#${{ secrets.GH_TOKEN }}#g" ./wordpress-backup.sh
          sed -i "s#GH_USERNAME#${{ secrets.GH_USERNAME }}#g" ./wordpress-backup.sh
          sed -i "s#S_DB_ENDPOINT#${{ secrets.S_DB_ENDPOINT }}#g" ./wordpress-backup.sh
          sed -i "s#S_DB_USER#${{ secrets.S_DB_USER }}#g" ./wordpress-backup.sh
          sed -i "s#S_DB_PASSWORD#${{ secrets.S_DB_PASSWORD }}#g" ./wordpress-backup.sh
          cat ./wordpress-backup.sh

          echo "Secrets to wordpress-restore.sh"
          sed -i "s#GH_TOKEN#${{ secrets.GH_TOKEN }}#g" ./wordpress-restore.sh
          sed -i "s#GH_USERNAME#${{ secrets.GH_USERNAME }}#g" ./wordpress-restore.sh
          sed -i "s#S_DB_ENDPOINT#${{ secrets.S_DB_ENDPOINT }}#g" ./wordpress-restore.sh
          sed -i "s#S_DB_USER#${{ secrets.S_DB_USER }}#g" ./wordpress-restore.sh
          sed -i "s#S_DB_PASSWORD#${{ secrets.S_DB_PASSWORD }}#g" ./wordpress-restore.sh
          cat ./wordpress-restore.sh

      - name: Copy files to VM
        run: |
          echo "Copying files to VM..."
          echo "Current working directory: ${PWD}"

          scp -v -r -i private_key -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT }} "${PWD}/" ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }}:~
          echo "Files copied successfully."
            
      - name: Run git-setup.sh on the VM
        run: |
          echo "Running git-setup.sh on VM..."
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }} 'sudo bash /home/ubuntu/EPA-Dev-AWS/git-setup.sh || { echo "Script failed"; exit 1; }' 
          echo "Script executed successfully."
          
      - name: Run lemp-setup.sh on the VM
        run: |
          echo "Running lemp-setup.sh on VM..."
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }} 'sudo bash /home/ubuntu/EPA-Dev-AWS/lemp-setup.sh || { echo "Script failed"; exit 1; }'
          echo "Script executed successfully."

      - name: Run cloudflare-dns.sh on the VM
        run: |
          echo "Running cloudflare-dns.sh on VM..."
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }} 'sudo bash /home/ubuntu/EPA-Dev-AWS/cloudflare-dns.sh || { echo "Script failed"; exit 1; }'
          echo "Script executed successfully."
        
      - name: Run wordpress-install.sh on the VM
        run: |
          echo "Running wordpress-install.sh on VM..."
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }} 'sudo bash /home/ubuntu/EPA-Dev-AWS/wordpress-install.sh || { echo "Script failed"; exit 1; }'
          echo "Script executed successfully."

      - name: Test LEMP Stack Components (Nginx, MySQL, PHP)
        run: |
          echo "Testing LEMP stack components..."

          # Test if Nginx is running
          echo "Testing Nginx..."
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }} "systemctl is-active --quiet nginx && echo 'Nginx is running' || echo 'Nginx is not running'"
          
          # Test if MySQL/MariaDB is running
          echo "Testing MySQL/MariaDB..."
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }} "systemctl is-active --quiet mysql && echo 'MySQL is running' || echo 'MySQL is not running'"

          # Test if PHP is installed and running
          echo "Testing PHP..."
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }} "php -v || echo 'PHP is not installed'"

    
      - name: Run certbot-ssl-install.sh on the VM
        run: |
          echo "Running certbot-ssl-install.sh on VM..."
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }} 'sudo bash /home/ubuntu/EPA-Dev-AWS/certbot-ssl-install.sh || { echo "Script failed"; exit 1; }'
          echo "Script executed successfully."

      - name: Run wordpress-restore.sh on the VM
        run: |
          echo "Running wordpress-restore.sh on VM..."
          ssh -i private_key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.S_PUBLIC_IP }} 'sudo bash /home/ubuntu/EPA-Dev-AWS/wordpress-restore.sh || { echo "Script failed"; exit 1; }'
          echo "Script executed successfully."

          

          

        
